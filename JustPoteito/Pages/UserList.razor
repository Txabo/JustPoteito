@using JustPoteito.Components
@using JustPoteito.Models;
@using JustPoteito;
@inject HttpClient Client;
@inject NavigationManager NavManager;
@inject IJSRuntime Js;

<PageTitle>All users</PageTitle>

<div>
    @if (users.Count > 0)
    {
        @for (int i = paginationParameters.firstElement; i <= paginationParameters.lastElement; i++)
        {

            @if (users[i].Roles.Count > 0)
            {
                if (users[i].Roles.FindIndex(role => role.Name.Equals("ADMIN")) != -1)
                {
                    isAdmin = true;
                }
                else
                {
                    isAdmin = false;
                }
                if (users[i].Roles.FindIndex(role => role.Name.Equals("USER")) != -1)
                {
                    isUser = true;
                }
                else
                {
                    isUser = false;    
                }
            }    
            
            <table class="userTable">
                <GetUsers user="@users[i]" UpdateUser="UpdateUser" DeleteUser="DeleteUser" isAdmin="isAdmin" isUser="isUser"/>
            </table>
        }

        <div class="d-flex justify-content-around paginate-button-container">
            @if (!isFirstPage)
            {
                <button class="btn btn-paginate" @onclick="previousPage">Previous</button>
            } 
            @if (!isLastPage)
            {
                <button class="btn btn-paginate" @onclick="nextPage">Next</button>
            }
        </div>
    }
</div>


@code {
    private User clickedUser = new User();
    private List<User> users = new List<User>();
    public PaginationParameters paginationParameters { get; set; }
    public bool isFirstPage { get; set; } = false;
    public bool isLastPage { get; set; } = false;

    protected bool isAdmin { get; set; }
    protected bool isUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();

        paginationParameters = new PaginationParameters();
        setPaginationInitialValues();
        paginateUsers();
    }

    private async Task GetUsers()
    {
        users = await Client.GetFromJsonAsync<List<User>>(Endpoints.GetUsers());
    }

    private void setPaginationInitialValues()
    {

        isFirstPage = true;
        paginationParameters.pageSize = 5;
        paginationParameters.actualPage = 1;

        paginationParameters.totalPages = users.Count / paginationParameters.pageSize;

        if (users.Count % paginationParameters.pageSize > 0)
        {
            paginationParameters.totalPages += 1;
        }
    }

    private void paginateUsers()
    {

        isLastPage = (paginationParameters.actualPage >= paginationParameters.totalPages) ? true : false;
        isFirstPage = (paginationParameters.actualPage <= 1) ? true : false;

        paginationParameters.firstElement = paginationParameters.pageSize * (paginationParameters.actualPage - 1);

        if (paginationParameters.actualPage == paginationParameters.totalPages
            && users.Count % paginationParameters.pageSize > 0)
        {
            paginationParameters.lastElement = paginationParameters.firstElement + (users.Count % paginationParameters.pageSize) - 1;
        } else
        {
            paginationParameters.lastElement = paginationParameters.firstElement + paginationParameters.pageSize - 1;
        }

        StateHasChanged();
    }

    public void nextPage()
    {
        if (paginationParameters.actualPage < paginationParameters.totalPages)
        {
            paginationParameters.actualPage += 1;
            paginateUsers();
        }
    }

    public void previousPage()
    {
        if (paginationParameters.actualPage > 1)
        {
            paginationParameters.actualPage -= 1;
            paginateUsers();
        }
    }

    protected async void UpdateUser(int id, User updateUser)
    {

        using var response = await Client.PutAsJsonAsync(Endpoints.UpdateUser(id), updateUser);
        //await Js.InvokeAsync<string>("showMessage", "User updated");
        await GetUsers();
        setPaginationInitialValues();
        paginateUsers();
    }


    protected async void DeleteUser(int userId)
    {
        await Client.PostAsJsonAsync(Endpoints.DeleteUser(userId), "");
        await GetUsers();
        setPaginationInitialValues();
        paginateUsers();
    }
}
